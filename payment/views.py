import braintree
from django.shortcuts import render, redirect, get_object_or_404
from django.conf import settings
from orders.models import Order
from .tasks import payment_completed

# instantiate Braintree payment gateway
gateway = braintree.BraintreeGateway(settings.BRAINTREE_CONF)


def payment_process(request):
    # get current order from order_id session key
    order_id = request.session.get('order_id')
    # retrieve order object for the given ID or rise 404 if it is not found
    order = get_object_or_404(Order, id=order_id)
    total_cost = order.get_total_cost()

    if request.method == 'POST':
        # retrieve nonce to generate new transaction
        nonce = request.POST.get('payment_method_nonce', None)
        # create and submit this transaction
        result = gateway.transaction.sale({
            # total ammount to charge the customer
            'amount': f'{total_cost:.2f}',
            # token nonce generated by Braintree for the payment
            'payment_method_nonce': nonce,
            # transaction is automatically submitted for settlement
            'options': {
                'submit_for_settlement': True
            }
        })
        if result.is_success:
            # mark the order as paid
            order.paid = True
            # and store the unique transaction id
            order.braintree_id = result.transaction.id
            order.save()
            # launch payment_complete when a payment is successfully completed,
            # then call delay()method of the task to execute it asynchronously
            # task will be added to the que and will be executed by celery worker ASAP
            payment_completed.delay(order.id)
            # redirect if payment successful to payment done
            return redirect('payment:done')
        else:
            return redirect('payment:canceled')
    else:
        # generate token
        client_token = gateway.client_token.generate()
        return render(request,
                      'payment/process.html',
                      {'order': order,
                       'client_token': client_token})

# successful payment
def payment_done(request):
    return render(request, 'payment/done.html')

# payment canceled
def payment_canceled(request):
    return render(request, 'payment/canceled.html')